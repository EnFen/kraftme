require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe ProductsController, type: :controller do

  include Devise::Test::ControllerHelpers

  let(:user) {
    User.create!(
        id: 1, 
        email: 'foo@bar.com', 
        password: '123456', 
        username: 'foo', 
        first_name: 'foo', 
        last_name: 'bar', 
        address: '123 foo street', 
        city: 'barville', 
        postcode: 1234, 
        state: 'LAW'
      )
  }

  # This should return the minimal set of attributes required to create a valid
  # Product. As you add validations to Product, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {    
    {
      id: 1,
      product_title: 'foo',
      description: 'barbarbarbar',
      price: 50,
      medium: 'oil',
      quantity: 1,
      creator: 'artist',
      user_id: user.id,
      image: {io: File.open("test/fixtures/Artworks/Anh_Do_oil.jpeg"), filename: "Anh_Do_oil.jpeg", content_type: 'image/jpeg'}
    }
  }

  let(:invalid_attributes) {
    {
      id: '',
      product_title: '',
      description: '',
      price: 0,
      medium: '',
      quantity: 0,
      creator: '',
      user_id: user.id,
      image: {}
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ProductsController. Be sure to keep this updated too.
  let(:valid_session) { 
    sign_in user
  }

  describe "GET #index" do
    it "returns a success response" do
      product = Product.create!(valid_attributes)
      get :index, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      product = Product.create!(valid_attributes)
      get :show, params: {id: product.to_param}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      get :new, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "GET #edit" do
    it "returns a success response" do
      product = Product.create!(valid_attributes)     
      get :edit, params: {id: product.to_param}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Product" do
        expect {
          post :create, params: {product: valid_attributes}, session: valid_session
        }.to change(Product, :count).by(1)
      end

      it "redirects to the created product" do
        post :create, params: {product: valid_attributes}, session: valid_session
        expect(response).to redirect_to(Product.last)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: {product: invalid_attributes}, session: valid_session
        expect(response).to be_successful
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {
          id: 1,
          product_title: 'bar',
          description: 'foofoofoofoo',
          price: 100,
          medium: 'acrylic',
          quantity: 2,
          creator: 'artist',
          user_id: user.id,
          image: {io: File.open("test/fixtures/Artworks/Doctor_who.jpeg"), filename: "Doctor_who.jpeg", content_type: 'image/jpeg'}
        }
      }

      it "updates the requested product" do
        product = Product.create! valid_attributes
        put :update, params: {id: product.to_param, product: new_attributes}, session: valid_session
        product.reload
        # skip("Add assertions for updated state")
      end

      it "redirects to the product" do
        product = Product.create! valid_attributes
        put :update, params: {id: product.to_param, product: valid_attributes}, session: valid_session
        expect(response).to redirect_to(product)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'edit' template)" do
        product = Product.create! valid_attributes
        put :update, params: {id: product.to_param, product: invalid_attributes}, session: valid_session
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested product" do
      product = Product.create! valid_attributes
      expect {
        delete :destroy, params: {id: product.to_param}, session: valid_session
      }.to change(Product, :count).by(-1)
    end

    it "redirects to the products list" do
      product = Product.create! valid_attributes
      delete :destroy, params: {id: product.to_param}, session: valid_session
      expect(response).to redirect_to(products_url)
    end
  end

end
